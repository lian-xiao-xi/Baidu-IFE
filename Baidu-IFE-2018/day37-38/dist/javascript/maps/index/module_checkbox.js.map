{"version":3,"sources":["index/module_checkbox.js"],"names":["define","require","exports","common_1","Object","defineProperty","value","bindClickHandle","wrapperEle","elesArr","Array","from","getEle","checkallEle","querySelector","addEventListener","event","targetEle","target","tagName","toLocaleLowerCase","getAttribute","dataType","itemClick","setCheckAll","checkedLen","length","checked","checkLen","forEach","item","e","len","preventDefault","elesLen"],"mappings":"AAAAA,OAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,kBAAvB,CAAP,EAAmD,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,QAA5B,EAAsC;AACrF;;AACAC,WAAOC,cAAP,CAAsBH,OAAtB,EAA+B,YAA/B,EAA6C,EAAEI,OAAO,IAAT,EAA7C;AACA;;;;AAIA,aAASC,eAAT,CAAyBC,UAAzB,EAAqC;AACjC,YAAIC,UAAUC,MAAMC,IAAN,CAAYR,SAASS,MAAT,CAAgBJ,UAAhB,EAA4B,0BAA5B,CAAZ,CAAd;AACA,YAAIK,cAAcL,WAAWM,aAAX,CAAyB,8BAAzB,CAAlB;AACA;AACA;AACAN,mBAAWO,gBAAX,CAA4B,OAA5B,EAAqC,UAAUC,KAAV,EAAiB;AAClD,gBAAIC,YAAYD,MAAME,MAAtB;AACA,gBAAID,UAAUE,OAAV,CAAkBC,iBAAlB,OAA0C,OAA1C,IAAqDH,UAAUI,YAAV,CAAuB,MAAvB,MAAmC,UAA5F,EAAwG;AACpG;AACH;AACD,gBAAMC,WAAWL,UAAUI,YAAV,CAAuB,YAAvB,CAAjB;AACA,oBAAQC,QAAR;AACI,qBAAK,MAAL;AACIC,8BAAUP,KAAV,EAAiBP,OAAjB,EAA0BI,WAA1B;AACA;AACJ,qBAAK,UAAL;AACIW,gCAAYR,KAAZ,EAAmBP,OAAnB;AACA;AANR;AAQH,SAdD;AAeAgB,mBAAWhB,OAAX,MAAwBA,QAAQiB,MAAhC,GAAyCb,YAAYc,OAAZ,GAAsB,IAA/D,GAAsEd,YAAYc,OAAZ,GAAsB,KAA5F;AACH;AACDzB,YAAQK,eAAR,GAA0BA,eAA1B;AACA;;;AAGA,aAASkB,UAAT,CAAoBhB,OAApB,EAA6B;AACzB,YAAImB,WAAW,CAAf;AACAnB,gBAAQoB,OAAR,CAAgB,UAACC,IAAD,EAAU;AACtBA,iBAAKH,OAAL,IAAgB,EAAEC,QAAlB;AACH,SAFD;AAGA,eAAOA,QAAP;AACH;AACD;;;;AAIA,aAASL,SAAT,CAAmBQ,CAAnB,EAAsBtB,OAAtB,EAA+BI,WAA/B,EAA4C;AACxC,YAAImB,MAAMP,WAAWhB,OAAX,CAAV;AACA;AACA;AACA;AACA,YAAIuB,QAAQ,CAAZ,EAAe;AACX;AACAD,cAAEE,cAAF;AACH;AACD,YAAMC,UAAUzB,QAAQiB,MAAxB;AACA;AACAM,gBAAQE,OAAR,GAAkBrB,YAAYc,OAAZ,GAAsB,IAAxC,GAA+Cd,YAAYc,OAAZ,GAAsB,KAArE;AACH;AACD;;;;AAIA,aAASH,WAAT,CAAqBO,CAArB,EAAwBtB,OAAxB,EAAiC;AAC7B;AACA,YAAIgB,WAAWhB,OAAX,MAAwBA,QAAQiB,MAApC,EAA4C;AACxCK,cAAEE,cAAF;AACH,SAFD,MAGK;AACDxB,oBAAQoB,OAAR,CAAgB,gBAAQ;AACpBC,qBAAKH,OAAL,GAAe,IAAf;AACH,aAFD;AAGH;AACJ;AACJ,CAxED;;AA0EA","file":"../../index/module_checkbox.js","sourcesContent":["define([\"require\", \"exports\", \"../common/common\"], function (require, exports, common_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * 给一组checkbox绑定click事件，实现全选功能\n     * @param wapperId 一组复选框容器的元素\n     */\n    function bindClickHandle(wrapperEle) {\n        let elesArr = Array.from((common_1.getEle(wrapperEle, 'input[data-check=\"item\"]')));\n        let checkallEle = wrapperEle.querySelector('input[data-check=\"checkall\"]');\n        // let wrapperEle: Element = document.getElementById(wapperId);\n        // 这里需要绑定click事件，不能绑定change事件\n        wrapperEle.addEventListener('click', function (event) {\n            let targetEle = event.target;\n            if (targetEle.tagName.toLocaleLowerCase() !== 'input' || targetEle.getAttribute('type') !== 'checkbox') {\n                return;\n            }\n            const dataType = targetEle.getAttribute('data-check');\n            switch (dataType) {\n                case 'item':\n                    itemClick(event, elesArr, checkallEle);\n                    break;\n                case 'checkall':\n                    setCheckAll(event, elesArr);\n                    break;\n            }\n        });\n        checkedLen(elesArr) === elesArr.length ? checkallEle.checked = true : checkallEle.checked = false;\n    }\n    exports.bindClickHandle = bindClickHandle;\n    /**\n     * 返回当前子选项 checkbox 中选中的数量\n     */\n    function checkedLen(elesArr) {\n        let checkLen = 0;\n        elesArr.forEach((item) => {\n            item.checked && ++checkLen;\n        });\n        return checkLen;\n    }\n    /**\n     * 点击子选项 checkbox 执行的事件\n     * 参数 elesArr 为所有子选项checkbox的元素集合\n     */\n    function itemClick(e, elesArr, checkallEle) {\n        let len = checkedLen(elesArr);\n        // 不允许一个都不勾选\n        // 因为点击事件开始执行之后，对应的type=\"checkbox\" 的 input 的checked属性变为false；\n        // 所以下面应该是 if(len === 0) 而不是 if(len === 1)\n        if (len === 0) {\n            // 使相应的check变为选中状态\n            e.preventDefault();\n        }\n        const elesLen = elesArr.length;\n        // 根据被选中的checkbox数量是否等于所有子项目checkbox（去除全选checkbox剩下的checkbox）的数量，来决定是否把全选checkbox给选中\n        len === elesLen ? checkallEle.checked = true : checkallEle.checked = false;\n    }\n    /**\n     * 点击全选checkbox执行的方法\n     * 参数 elesArr 为所有子选项checkbox的元素集合\n     */\n    function setCheckAll(e, elesArr) {\n        // 如果子选项checkbox已经全部被选中（此时全选checkbox也应该已经被选中），则点击全选按钮无反应\n        if (checkedLen(elesArr) === elesArr.length) {\n            e.preventDefault();\n        }\n        else {\n            elesArr.forEach(item => {\n                item.checked = true;\n            });\n        }\n    }\n});\n\n//# sourceMappingURL=../maps/index/module_checkbox.js.map\n"]}