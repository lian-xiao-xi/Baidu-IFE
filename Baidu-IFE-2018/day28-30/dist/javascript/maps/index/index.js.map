{"version":3,"sources":["index/index.ts"],"names":[],"mappings":"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","file":"../../index/index.js","sourcesContent":["// 邮箱后缀List参考\r\nlet postfixList = ['163.com', 'gmail.com', '126.com', 'qq.com', '263.net'];\r\n\r\nlet inputWrapper: HTMLInputElement = document.querySelector('#email-input');\r\nlet tipListWrapper: HTMLElement = document.querySelector('#email-sug-wrapper');\r\n\r\n// 最基本的邮箱格式\r\nlet reg: RegExp = /^([^@]+)@([^@]+|$)$/;\r\n\r\n// 定义一个变量用来保存当前被选中的index\r\nlet activedIndex: number = 0;\r\n\r\n// 获取用户输入的内容\r\nfunction getInputVal(): string {\r\n  return inputWrapper.value.trim();\r\n}\r\n\r\n// 生成提示框中的提示内容\r\nfunction createTipList(): string {\r\n  let inputVal = htmlEncode(getInputVal());\r\n  let spliceStr: string = inputVal;\r\n  let copyData = postfixList.concat()\r\n  if (inputVal.match(reg)) {\r\n    tipListWrapper.style.display = 'block';\r\n    let matchRes: any[] = inputVal.match(reg);\r\n    if (matchRes[2] !== '') {\r\n      let postStr = matchRes[2];\r\n      let startRegx = new RegExp(`^${postStr}`);\r\n      if (postfixList.some((item: string) => {\r\n        // ts 中不支持es6的startsWith方法\r\n        // return item.startsWith(postStr)\r\n        return startRegx.test(item)\r\n      })) {\r\n        copyData = postfixList.filter((item: string) => {\r\n          // return item.startsWith(postStr)\r\n          return startRegx.test(item)\r\n        })\r\n      }\r\n    }\r\n    spliceStr = matchRes[1];\r\n  } else {\r\n    if (!/^[^@]+$/.test(inputVal)) {\r\n      tipListWrapper.style.display = 'none';\r\n    } else {\r\n      tipListWrapper.style.display = 'block';\r\n    }\r\n  }\r\n  let listHtmlStr: string = '';\r\n  activedIndex = 0;\r\n  copyData.forEach((item, index) => {\r\n    if (index === activedIndex) {\r\n      listHtmlStr += `<li class=\"tip-item actived\" data-type=\"tip_item\">${spliceStr}@${item}</li>`;\r\n    } else {\r\n      listHtmlStr += `<li class=\"tip-item\" data-type=\"tip_item\">${spliceStr}@${item}</li>`\r\n    }\r\n  })\r\n  return listHtmlStr;\r\n}\r\n\r\n// 将提示内容添加到#email-sug-wrapper元素中\r\nfunction addToTip() {\r\n  tipListWrapper.innerHTML = createTipList();\r\n}\r\n\r\n\r\n// 当input输入框内容变化时，重新渲染提示内容\r\ninputWrapper.addEventListener('input', function (event) {\r\n  addToTip()\r\n})\r\n\r\nfunction tipToInput(text: string) {\r\n  inputWrapper.value = htmlDecode(text);\r\n  tipListWrapper.style.display = 'none';\r\n}\r\n// 点击提示内容时，将提示内容填到输入框中\r\ntipListWrapper.addEventListener('click', function (event) {\r\n  if (!(event.target instanceof Element)) return;\r\n  let target = event.target as Element;\r\n  if (target.getAttribute('data-type') === 'tip_item') {\r\n    tipToInput(target.textContent);\r\n    inputWrapper.focus();\r\n  }\r\n})\r\n\r\n// 通过键盘操作（回车和上下键）进行提示框的选择\r\ninputWrapper.addEventListener('keydown', function (event) {\r\n  let tipListDisplay = document.defaultView.getComputedStyle(tipListWrapper, null).display;\r\n  if (tipListDisplay === 'none') return;\r\n  const keyCode = event.keyCode;\r\n  let tipList = tipListWrapper.querySelectorAll('[data-type=\"tip_item\"]');\r\n  switch (keyCode) {\r\n    // 上键\r\n    case 38:\r\n      tipList[activedIndex].classList.remove('actived');\r\n      if (--activedIndex < 0) {\r\n        activedIndex = tipList.length - 1;\r\n      }\r\n      tipList[activedIndex].classList.add('actived');\r\n      break;\r\n    // 下键\r\n    case 40:\r\n      tipList[activedIndex].classList.remove('actived');\r\n      // ++activedIndex;\r\n      if (++activedIndex >= tipList.length) {\r\n        activedIndex = 0;\r\n      }\r\n      tipList[activedIndex].classList.add('actived');\r\n      break;\r\n    // 回车键\r\n    case 13:\r\n      tipToInput(tipList[activedIndex].textContent)\r\n      break;\r\n    case 27:\r\n      inputWrapper.select();\r\n      break;\r\n  }\r\n})\r\n\r\n/**\r\n * 对html字符转义\r\n */\r\nfunction htmlEncode(html: string): string {\r\n  //1.首先动态创建一个容器标签元素，如DIV\r\n  var temp = document.createElement(\"div\");\r\n  //2.然后将要转换的字符串设置为这个元素的innerText(ie支持)或者textContent(火狐，google支持)\r\n  (temp.textContent != undefined) ? (temp.textContent = html) : (temp.innerText = html);\r\n  //3.最后返回这个元素的innerHTML，即得到经过HTML编码转换的字符串了\r\n  var output = temp.innerHTML;\r\n  temp = null;\r\n  return output;\r\n}\r\n\r\n/**\r\n * 对html字符反转义\r\n */\r\nfunction htmlDecode(text: string): string {\r\n  //1.首先动态创建一个容器标签元素，如DIV\r\n  var temp = document.createElement(\"div\");\r\n  //2.然后将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)\r\n  temp.innerHTML = text;\r\n  //3.最后返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，即得到经过HTML解码的字符串了。\r\n  var output = temp.innerText || temp.textContent;\r\n  temp = null;\r\n  console.log(text, output)\r\n  return output;\r\n}\r\n"]}